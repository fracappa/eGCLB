// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLb_sticky_rr_v2 returns the embedded CollectionSpec for lb_sticky_rr_v2.
func loadLb_sticky_rr_v2() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Lb_sticky_rr_v2Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load lb_sticky_rr_v2: %w", err)
	}

	return spec, err
}

// loadLb_sticky_rr_v2Objects loads lb_sticky_rr_v2 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lb_sticky_rr_v2Objects
//	*lb_sticky_rr_v2Programs
//	*lb_sticky_rr_v2Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLb_sticky_rr_v2Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLb_sticky_rr_v2()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lb_sticky_rr_v2Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v2Specs struct {
	lb_sticky_rr_v2ProgramSpecs
	lb_sticky_rr_v2MapSpecs
	lb_sticky_rr_v2VariableSpecs
}

// lb_sticky_rr_v2ProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v2ProgramSpecs struct {
	LoadBalancerRrV2 *ebpf.ProgramSpec `ebpf:"load_balancer_rr_v2"`
}

// lb_sticky_rr_v2MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v2MapSpecs struct {
	BackendMap *ebpf.MapSpec `ebpf:"backend_map"`
	FlowMap    *ebpf.MapSpec `ebpf:"flow_map"`
}

// lb_sticky_rr_v2VariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v2VariableSpecs struct {
	NumBackends *ebpf.VariableSpec `ebpf:"num_backends"`
}

// lb_sticky_rr_v2Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v2Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v2Objects struct {
	lb_sticky_rr_v2Programs
	lb_sticky_rr_v2Maps
	lb_sticky_rr_v2Variables
}

func (o *lb_sticky_rr_v2Objects) Close() error {
	return _Lb_sticky_rr_v2Close(
		&o.lb_sticky_rr_v2Programs,
		&o.lb_sticky_rr_v2Maps,
	)
}

// lb_sticky_rr_v2Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v2Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v2Maps struct {
	BackendMap *ebpf.Map `ebpf:"backend_map"`
	FlowMap    *ebpf.Map `ebpf:"flow_map"`
}

func (m *lb_sticky_rr_v2Maps) Close() error {
	return _Lb_sticky_rr_v2Close(
		m.BackendMap,
		m.FlowMap,
	)
}

// lb_sticky_rr_v2Variables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v2Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v2Variables struct {
	NumBackends *ebpf.Variable `ebpf:"num_backends"`
}

// lb_sticky_rr_v2Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v2Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v2Programs struct {
	LoadBalancerRrV2 *ebpf.Program `ebpf:"load_balancer_rr_v2"`
}

func (p *lb_sticky_rr_v2Programs) Close() error {
	return _Lb_sticky_rr_v2Close(
		p.LoadBalancerRrV2,
	)
}

func _Lb_sticky_rr_v2Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed lb_sticky_rr_v2_bpfeb.o
var _Lb_sticky_rr_v2Bytes []byte
