// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLb_sticky_rr_v1 returns the embedded CollectionSpec for lb_sticky_rr_v1.
func loadLb_sticky_rr_v1() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Lb_sticky_rr_v1Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load lb_sticky_rr_v1: %w", err)
	}

	return spec, err
}

// loadLb_sticky_rr_v1Objects loads lb_sticky_rr_v1 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lb_sticky_rr_v1Objects
//	*lb_sticky_rr_v1Programs
//	*lb_sticky_rr_v1Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLb_sticky_rr_v1Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLb_sticky_rr_v1()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lb_sticky_rr_v1Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v1Specs struct {
	lb_sticky_rr_v1ProgramSpecs
	lb_sticky_rr_v1MapSpecs
	lb_sticky_rr_v1VariableSpecs
}

// lb_sticky_rr_v1ProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v1ProgramSpecs struct {
	LoadBalancerRrV1 *ebpf.ProgramSpec `ebpf:"load_balancer_rr_v1"`
}

// lb_sticky_rr_v1MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v1MapSpecs struct {
	FlowMap *ebpf.MapSpec `ebpf:"flow_map"`
}

// lb_sticky_rr_v1VariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_sticky_rr_v1VariableSpecs struct {
	NextIfindex *ebpf.VariableSpec `ebpf:"next_ifindex"`
	NumBackends *ebpf.VariableSpec `ebpf:"num_backends"`
}

// lb_sticky_rr_v1Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v1Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v1Objects struct {
	lb_sticky_rr_v1Programs
	lb_sticky_rr_v1Maps
	lb_sticky_rr_v1Variables
}

func (o *lb_sticky_rr_v1Objects) Close() error {
	return _Lb_sticky_rr_v1Close(
		&o.lb_sticky_rr_v1Programs,
		&o.lb_sticky_rr_v1Maps,
	)
}

// lb_sticky_rr_v1Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v1Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v1Maps struct {
	FlowMap *ebpf.Map `ebpf:"flow_map"`
}

func (m *lb_sticky_rr_v1Maps) Close() error {
	return _Lb_sticky_rr_v1Close(
		m.FlowMap,
	)
}

// lb_sticky_rr_v1Variables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v1Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v1Variables struct {
	NextIfindex *ebpf.Variable `ebpf:"next_ifindex"`
	NumBackends *ebpf.Variable `ebpf:"num_backends"`
}

// lb_sticky_rr_v1Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLb_sticky_rr_v1Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_sticky_rr_v1Programs struct {
	LoadBalancerRrV1 *ebpf.Program `ebpf:"load_balancer_rr_v1"`
}

func (p *lb_sticky_rr_v1Programs) Close() error {
	return _Lb_sticky_rr_v1Close(
		p.LoadBalancerRrV1,
	)
}

func _Lb_sticky_rr_v1Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed lb_sticky_rr_v1_bpfel.o
var _Lb_sticky_rr_v1Bytes []byte
