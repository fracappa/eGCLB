// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLb_v3 returns the embedded CollectionSpec for lb_v3.
func loadLb_v3() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Lb_v3Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load lb_v3: %w", err)
	}

	return spec, err
}

// loadLb_v3Objects loads lb_v3 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lb_v3Objects
//	*lb_v3Programs
//	*lb_v3Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLb_v3Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLb_v3()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lb_v3Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_v3Specs struct {
	lb_v3ProgramSpecs
	lb_v3MapSpecs
	lb_v3VariableSpecs
}

// lb_v3ProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_v3ProgramSpecs struct {
	LoadBalancerRrV3 *ebpf.ProgramSpec `ebpf:"load_balancer_rr_v3"`
}

// lb_v3MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_v3MapSpecs struct {
	BackendMap     *ebpf.MapSpec `ebpf:"backend_map"`
	BackendWeights *ebpf.MapSpec `ebpf:"backend_weights"`
	FlowMap        *ebpf.MapSpec `ebpf:"flow_map"`
}

// lb_v3VariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lb_v3VariableSpecs struct {
	NumBackends *ebpf.VariableSpec `ebpf:"num_backends"`
}

// lb_v3Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLb_v3Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_v3Objects struct {
	lb_v3Programs
	lb_v3Maps
	lb_v3Variables
}

func (o *lb_v3Objects) Close() error {
	return _Lb_v3Close(
		&o.lb_v3Programs,
		&o.lb_v3Maps,
	)
}

// lb_v3Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLb_v3Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_v3Maps struct {
	BackendMap     *ebpf.Map `ebpf:"backend_map"`
	BackendWeights *ebpf.Map `ebpf:"backend_weights"`
	FlowMap        *ebpf.Map `ebpf:"flow_map"`
}

func (m *lb_v3Maps) Close() error {
	return _Lb_v3Close(
		m.BackendMap,
		m.BackendWeights,
		m.FlowMap,
	)
}

// lb_v3Variables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadLb_v3Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_v3Variables struct {
	NumBackends *ebpf.Variable `ebpf:"num_backends"`
}

// lb_v3Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLb_v3Objects or ebpf.CollectionSpec.LoadAndAssign.
type lb_v3Programs struct {
	LoadBalancerRrV3 *ebpf.Program `ebpf:"load_balancer_rr_v3"`
}

func (p *lb_v3Programs) Close() error {
	return _Lb_v3Close(
		p.LoadBalancerRrV3,
	)
}

func _Lb_v3Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed lb_v3_bpfel.o
var _Lb_v3Bytes []byte
